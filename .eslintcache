[{"/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/index.js":"1","/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/App.js":"2","/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/reportWebVitals.js":"3","/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/utils/API.js":"4","/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/components/Search/Search.js":"5","/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/components/table/Table.js":"6","/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/components/Table/Table.js":"7","/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/components/Header/Header.js":"8","/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/components/Header/Navigation.js":"9"},{"size":554,"mtime":1610637510329,"results":"10","hashOfConfig":"11"},{"size":520,"mtime":1610637866365,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610569119284,"results":"13","hashOfConfig":"11"},{"size":367,"mtime":1610569119285,"results":"14","hashOfConfig":"11"},{"size":814,"mtime":1610637572573,"results":"15","hashOfConfig":"11"},{"size":4097,"mtime":1610552161787,"results":"16","hashOfConfig":"11"},{"size":5183,"mtime":1610569119283,"results":"17","hashOfConfig":"11"},{"size":688,"mtime":1610638287549,"results":"18","hashOfConfig":"11"},{"size":1242,"mtime":1610638249720,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qtv16k",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/index.js",[],"/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/App.js",[],"/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/reportWebVitals.js",[],["40","41"],"/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/utils/API.js",[],"/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/components/Search/Search.js",[],"/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/components/table/Table.js",[],"/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/components/Table/Table.js",["42"],"import React, { useState, useEffect } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport generateUniqueId from 'generate-unique-id';\nimport Moment from 'react-moment';\nimport API from '../../utils/API';\nimport Search from '../Search/Search';\n\nconst TableContainer = () => {\n  // create the search state object aling with the setSearch method\n  const [searchState, setSearch] = useState('');\n  // create the employees state object along with the setEmployees method\n  const [employees, setEmployees] = useState([]);\n  // create the sortState object along with the setSort method\n  const [sortState, setSort] = useState([]);\n  // when the component loads, run the api call\n  useEffect(() => {\n    API.getData().then(({ data }) => {\n      setEmployees(data.results);\n      // TODO remove console log\n      console.log(data.results);\n    });\n  }, []);\n\n  let filteredEmployees = employees.filter((employee) => {\n    return (\n      // allow users to search for first/last name, email or phone\n      employee.name.first.toLowerCase().indexOf(searchState) !== -1 ||\n      employee.name.last.toLowerCase().indexOf(searchState) !== -1 ||\n      employee.email.toLowerCase().indexOf(searchState) !== -1 ||\n      employee.phone.indexOf(searchState) !== -1\n    );\n  });\n\n  function onChange(e) {\n    // save whatever the user types into the search bar into the searchState object\n    setSearch(e.target.value);\n  }\n\n  function sortName() {\n    // access the employees array\n    // sort the employees array by the column specified upon click\n    // if it's currently unsorted, then we want to sort ascending order\n    // if its currently sorted, then we want to sort descending order\n    employees.sort((a, b) => {\n      // ascending sort\n      if (a.name.first < b.name.first) {\n        return -1;\n      }\n      // descending order\n      else if (b.name.first > a.name.first) {\n        return -1;\n      }\n      // no sort\n      else {\n        return 0;\n      }\n    });\n    setSort(...employees);\n  }\n\n  function sortAge() {\n    // access the employees array\n    // sort the employees array by the column specified upon click\n    // if it's currently unsorted, then we want to sort ascending order\n    // if its currently sorted, then we want to sort descending order\n    employees.sort((a, b) => {\n      if (a.dob.age < b.dob.age) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n    setSort(...employees);\n  }\n\n  return (\n    <div className=\"container\">\n      <Search onChange={onChange} records={employees.count} />\n      <Table striped bordered hover id=\"employeeTable\">\n        <thead>\n          <tr>\n            <th className=\"text-center\">ID</th>\n            <th className=\"text-center\">Photo</th>\n            <th className=\"text-center sort\" onClick={sortName}>\n              Name <i className=\"fas fa-sort\"></i>\n            </th>\n            <th className=\"text-center\">Phone</th>\n            <th className=\"text-center\">Email</th>\n            <th className=\"text-center\">Birthday</th>\n            <th className=\"text-center sort\" onClick={sortAge}>\n              Age <i className=\"fas fa-sort\"></i>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredEmployees.map((employee, index) => {\n            // generate the id\n            const id = generateUniqueId({\n              length: 5,\n              useLetters: false\n            });\n            // reformate the date of birth for each employee (called in the dob column)\n            const dateToFormat = employee.dob.date;\n            return (\n              <tr key={index} className=\"text-center\">\n                {/* Assign a random number for their ID */}\n                <td className=\"align-middle text-center\">{id}</td>\n                <td className=\"align-middle text-center\">\n                  {/* Add the profile image of employee, and set the alt tag to their name */}\n                  <img\n                    className=\"employee\"\n                    src={employee.picture.medium}\n                    alt={`Employee Profile | ${employee.name.first} ${employee.name.last}`}\n                  ></img>\n                </td>\n                {/* Add the employee's name */}\n                <td className=\"align-middle text-center\">\n                  {employee.name.first} {employee.name.last}\n                </td>\n                {/* Add the employee phone number */}\n                <td className=\"align-middle text-center\">{employee.phone}</td>\n                {/* Add the employee email address and make it clickable */}\n                <td className=\"align-middle text-center\">\n                  <a href={`mailto:${employee.email}`}>{employee.email}</a>\n                </td>\n                {/* Add the employee's date of birth in a month-day-year format using the react-moment package */}\n                <td className=\"align-middle text-center\">\n                  <Moment format=\"MMM DD, YYYY\">{dateToFormat}</Moment>\n                </td>\n                <td className=\"align-middle text-center\">{employee.dob.age}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default TableContainer;\n","/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/components/Header/Header.js",[],"/Users/joshuaallan/Desktop/Bootcamp/homework-deliverables/employable-react-directory/src/components/Header/Navigation.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":14,"column":10,"nodeType":"49","messageId":"50","endLine":14,"endColumn":19},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'sortState' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]